getwd()
q()
Rcmdr
Anne Domnic
library("swirl")
swirl()
head(pvalues)
head(pValues)
sum(pValues)
sum(pValues < 0.05)
sum(p.adjust(pValues, method = "bonferroni") < 0.05)
sum(p.adjust(pValues, method = "BH") < 0.05)
tail(trueStatus)
table(pValues2, trueStatus < 0.05)
table(pValues2 < 0.05, trueStatus)
5%
24/500
table(p.adjust(pValues2 < 0.05), trueStatus)
table(p.adjust(pValues2, method = \"bonferroni"\ < 0.05), trueStatus)
"table(p.adjust(pValues2,method=\"bonferroni\") < 0.05, trueStatus)"
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
3.5
print(g2)
head(sh)
nh
median(resampleMedians)
median(resampledMedians)
median(sh)
sam <- sample(fh, nf*B, replace = TRUE)
sam <- sample(fh, nh*B, replace = TRUE)
resam <- matrix(sam,B,nh)
meds <- apply(resam,1,median)
median(meds)-median(fh)
sd(meds)
sd(resampleMedians)
sd(resampledMedians)
quantile(resampledMedians, c(.025, .975))
quantile(meds, c(.025, .975))
dim(InsectSprays)
names(InspectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts,group)
obs
mean(Bdata$count)-mean(Cdata$count)
sample
sample(group)
perms <- sapply(1 : 10000, function(1) testStat(BCcounts, sample(group)))
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
sessionInfo()
install.packages("dplyr")
install.packages("R.utils")
file.edit('~/.Rprofile')
options(rpubs.upload.method = "internal")
file.edit('~/.Rprofile')
options(rpubs.upload.method = "internal")
options(rpubs.upload.method = "internal")
file.edit('~/.Rprofile')
options(rpubs.upload.method = "internal")
options(rpubs.upload.method = "internal")
data(sleep)
head(sleep)
library(datasets); data(ChickWeight); library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1:2)] <- paste ("time", names(wideCW)[-(1:2)], sep =""
library(dplyr)
wideCW <- mutate(wideCW, gain = time21- time0)
library(datasets); data(ChickWeight); library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names((wideCW)[-(1 : 2)] <- paste ("time", names(wideCW)[-(1 : 2)], sep ="")
library(dplyr)
wideCW <- mutate(wideCW, gain = time21 - time0)
x <- 1100
s <- 30
n <- 9
alpha <- 0.05
t <- qt(1 - alpha/2, n-1)
round(x + c(-1 ,1)*t * s/sqr(n))
x <- 1100
s <- 30
n <- 9
alpha <- 0.05
t <- qt(1 - alpha/2, n-1)
round(x + c(-1 ,1)*t * s/sqrt(n))
x <- -2
n <- 9
alpha <- 0.05
t <- qt(1-alpha/2, n-1)
s <- -x * sqrt(n)/t
x <- -2
n <- 9
alpha <- 0.05
t <- qt(1-alpha/2, n-1)
s <- -x * sqrt(n)/t
s
n1 <- 10
n2 <- 10
x <- 5
y <- 3
var_x <- 0.6
var_y <- 0.68
alpha <- 0.05
sp_2 <- ((n1 - 1)*  var_x + (n2 - 1)* var_y)/ (n1 + n2 -2)
t <- qt(1 - (alpha/2), n1 + n2 -2)
sp <- sqrt(sp_2)
round((y - x) + c(-1, 1)* t * sp * (sqrt(1/n1 + 1/n2), 2)
n1 <- 10
n2 <- 10
x <- 5
y <- 3
var_x <- 0.6
var_y <- 0.68
alpha <- 0.05
sp_2 <- ((n1 - 1)*  var_x + (n2 - 1)* var_y)/ (n1 + n2 -2)
t <- qt(1 - (alpha/2), n1 + n2 -2)
sp <- sqrt(sp_2)
round((y - x) + c(-1, 1)* t * sp * (sqrt(1/n1 + 1/n2)), 2)
n1 <- 100
n2 <- 100
x <- 6
y <- 4
s_x <- 2
s_y <- 0.5
alpha <- 0.05
sp_2 <- ((n1 - 1)*s_x^2 + (n2 - 1)*s_y^2) / (n1 + n2 - 2)
sp <- sqrt(sp_2)
t <- qt(1 - (alpha/2), n1 + n2 - 2)
round((x - y) + c(-1, 1) * t * sp * (sqrt(1/n1 + 1/n2)), 2)
n1 <- 9
n2 <- 9
x <- -3
y <- 1
s_x <- 1.5
s_y <- 1.8
alpha <- 0.1
sp_2 <- ((n1 - 1)*s_x^2 + (n2 - 1)*s_y^2) / (n1 + n2 - 2)
sp <- sqrt(sp_2)
t <- qt(1 - (alpha/2), n1 + n2 - 2)
round((x - yr) + c(-1, 1) * t * sp * (sqrt(1/n1 + 1/n2)), 3)
n1 <- 9
n2 <- 9
x <- -3
y <- 1
s_x <- 1.5
s_y <- 1.8
alpha <- 0.1
sp_2 <- ((n1 - 1)*s_x^2 + (n2 - 1)*s_y^2) / (n1 + n2 - 2)
sp <- sqrt(sp_2)
t <- qt(1 - (alpha/2), n1 + n2 - 2)
round((x - y) + c(-1, 1) * t * sp * (sqrt(1/n1 + 1/n2)), 3)
library('swirl')
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(fit(child ~ parent), galton)
fit(child ~ parent), data  = galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coe[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.slope$ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varRes, varEst)
all.equal(varChild, varEst + varRes)
efit <- lm(accel ~ mag + dist, attenu)
mean(efit)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
install.packages('pander')
library(devtools)
install.pacakges('devtools')
install.packages("devtools")
system("pandoc -h")
?pandoc
library("pandoc")
install.packages("pandoc")
myReport$export()
pandoc("tmp.Rmd", "latex")
pander("tmp.Rmd", "latex")
library("pander")
pander("tmp.Rmd", "latex")
shinyUI(pageWithSidebar(
headerPanel("Illustrating inputs"),
sidebarPanel(
numericInput('ID1', 'Numeric input, labeled id1', 0, min = 10, step = 1),
checkboxGroupInput("id2", "Checkbox",
c("Value 1" = "1",
"Value 2" = "2",
"Value 3" = "3")),
dateInput("date", "Date")
),
mainPanel(
)
))
getwd()
setwd()
setwd("C:/Users/Anne/Documents")
install.packages("rattle")
install.packages("ElemStatLearn")
data(iris); library(ggplot2)
inTrain <- creat(DataPartition(y = iris$Species, p = 0.7, list = FALSE))
training <- iris[inTrain,]
testing <- iris[inTrain,]
data(iris); library(ggplot2)
inTrain <- create(DataPartition(y = iris$Species, p = 0.7, list = FALSE))
training <- iris[inTrain,]
testing <- iris[inTrain,]
data(iris); library(ggplot2)
inTrain <- create(DataPartition(y = iris$Species, p = 0.7, list = FALSE))
training <- iris[inTrain,]
testing <- iris[inTrain,]
data(iris); library(ggplot2)
inTrain <- createDataPartition(y = iris$Species, p = 0.7, list = FALSE)
training <- iris[inTrain,]
testing <- iris[inTrain,]
data(iris); library(ggplot2)
inTrain <- createDataPartition(y = iris$Species, p = 0.7, list = FALSE)
training <- iris[inTrain,]
testing <- iris[inTrain,]
install.packages("pgmm")
install.packages("rpart")
library(rattle)
rattle()
library(rattle)
library(rpart)
library(e1071)
library(rpart.plot)
install.packages("rpart.plot")
library(devtools)
library(slidify)
getwd()
setwd(C:\Users\Anne\Sample\Project)
setwd("C:\Users\Anne\Sample\Project\")
setwd("C:/Users/Anne/Sample/Project")
getwd()
author("first_deck")
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
getwd()
setwd("C:Users/Anne/Sample/Peoject/")
setwd("C:/Users/Anne/Sample/Project")
library(slidify)
author('test')
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
setwd(C:/Users/Anne/Developing-Data-Products)
setwd("C:/Users/Anne/Developing-Data-Products")
getwd()
library(shiny)
runApp("Developing-Data-Products")
